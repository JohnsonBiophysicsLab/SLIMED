/**
 * @file io.hpp
 * @author Y Ying (yying7@jh.edu)
 * @brief Manage io of continuum membrane model, including
 * parameter files, vertices and faces, and scaffolding structure
 * files.
 * @date 2023-03-29
 * 
 * @copyright Copyright (c) 2023
 * 
 */
#pragma once 

#include <fstream>
#include <sstream>
#include <iostream>
#include <stdlib.h>
#include <string>
#include <vector>
#include <stdexcept>
#include <sys/stat.h>

#include "mesh/Mesh.hpp"
#include "model/Record.hpp"
#include "model/Model.hpp"
#include "mesh/Vertex.hpp"
#include "Parameters.hpp"
#include "linalg/Linear_algebra.hpp"
#include "Dynamics.hpp"

/**
 * @brief Remove spaces from a string
 *
 * This function takes a raw string and removes any whitespace characters present in it. The modified string with no spaces is returned.
 *
 * @param rawString the original string to be processed
 *
 * @return The string with spaces removed.
 */
std::string pop_space(std::string rawString);

/**
 * @brief Import key-value pairs from a string
 *
 * This function takes two strings, `variableNameStr` and `variableValueStr`, which are expected to contain name-value pairs separated by 
 * an "=" sign. It then parses these variables and uses them to update a `Param` struct object's variables, which is passed as reference. 
 * If parsing and updating are successful, returns true, else returns false.
 *
 * @param variableNameStr the string containing names of the variables
 * @param variableValueStr the string containing values of the variables 
 * @param param the Param object to be updated 
 *
 * @return true if parsing and updating was successful, else false.
 */
bool import_kv_string(std::string variableNameStr, std::string variableValueStr, Param& param);

/**
 * @brief Import parameters from a file
 *
 * This function reads a parameter file specified by `filepath` and updates a `Param` struct object's variables using the information present
 * in the file. The updated `Param` object is passed as reference. If file reading and updating are successful, returns true, else false.
 *
 * @param param the Param object to be updated
 * @param filepath the path of the parameter file to be read
 *
 * @return true if file reading and updating was successful, else false.
 */
bool import_param_file(Param& param, std::string filepath);

/**
 * @brief Read data from a CSV file and store it in a vector of vectors with the specified data type.
 *
 * This function reads data from a CSV file, where each line represents a row of data,
 * and each value within a line is separated by the specified character.
 * 
 * Generated by GPT 3.5.
 *
 * @tparam T The data type (int, float, or double) to store in the resulting vector.
 * @param filepath The file path of the CSV file.
 * @param separator The character used as a separator in the CSV file (default is comma ',' for typical CSV files).
 * @return A vector of vectors containing the read data.
 * @throws std::invalid_argument If the data cannot be converted to the specified data type.
 */
template <typename T>
std::vector<std::vector<T>> read_data_from_csv(const std::string& filepath, char separator = ',') {
    // Open and read CSV file
    std::ifstream csvFile(filepath);
    if (!csvFile.is_open()) {
        // Handle error: Unable to open CSV file
        throw std::invalid_argument("Unable to open CSV file.");
    }

    // Data structure to store data
    std::vector<std::vector<T>> data;

    // Read each line from the CSV file
    std::string line;
    while (std::getline(csvFile, line)) {
        std::vector<T> row;
        std::istringstream iss(line);
        std::string value;

        // Parse the line using the specified separator
        while (std::getline(iss, value, separator)) {
            try {
                T typedValue = static_cast<T>(std::stod(value));
                row.push_back(typedValue);
            } catch (const std::invalid_argument& e) {
                // Handle error: Unable to convert to the specified data type
                csvFile.close(); // Close CSV file before throwing exception
                throw std::invalid_argument("Unable to convert data to the specified data type.");
            }
        }

        // Add the row to the data vector
        data.push_back(row);
    }

    // Close the CSV file
    csvFile.close();

    return data;
}

/**
 * @brief Import a mesh from separate files containing vertices and faces.
 *
 * This function reads vertices and faces from specified files and constructs a mesh.
 * 
 * @param mesh The Mesh object to write vertices and faces data.
 * @param verticesFilepath The file path of the vertices file.
 * @param facesFilepath The file path of the faces file.
 * @return True if the mesh is successfully imported, false otherwise.
 */
bool import_mesh_from_vertices_faces(Mesh& mesh, std::string verticesFilepath, std::string facesFilepath);

/**
 * @brief Import scaffolding mesh from a file
 *
 * This function reads a mesh file specified by `filepath` and returns a vector of matrices containing the vertices' coordinates of all
 * triangular faces. 
 *
 * @param filepath the path of the mesh file to be read
 *
 * @return A vector of matrices containing the vertices' coordinates of all triangular faces.
 */
std::vector<Matrix> import_scaffolding_mesh(std::string filepath);

/**
 * 
 * @deprecated Use Mesh::write_vertex_data_to_csv instead
 * @brief Writes the vertex data for the mesh to a CSV file.
 *
 * This function writes the coordinates of each vertex in the mesh to a CSV file named "vertex[nFile].csv", where nFile is
 * equal to iteration/100. The output is formatted as follows:
 *
 *     x1,y1,z1
 *     x2,y2,z2
 *     ...
 *
 * where xi, yi, and zi are the coordinates of the ith vertex in the mesh.
 * 
 * @note Step size and file name are left in definition in case customization is needed.
 *
 * @param mesh The mesh whose vertex data should be written to a CSV file.
 * @param iteration The current iteration number of the optimization algorithm.
 */
void write_vertex_data_to_csv(const Mesh &mesh, const int iteration)
__attribute__((deprecated("Use Mesh::write_vertex_data_to_csv instead.")));

/**
 * @brief Writes the energy force data to a CSV file.
 *
 * This function writes the energy and force data for each iteration in the following format:
 * 
 * "E_Curvature, E_Area, E_Regularization, E_Total ((pN.nm)), Mean Force (pN)"
 * 
 * @note File name is left in definition in case customization is needed.
 *
 * @param model The model that cotains a mesh whose vertex data should be written to a CSV file.
 *
 */
void write_energy_force_data_to_csv(const Model &model);

/**
 * @brief Writes the current iteration element face energy data to a CSV file.
 *
 * This function writes the energy data for each element face of
 *  the current iteration in the following format:
 *
 * "E_Curvature, E_Area, E_Regularization, E_Total"
 *
 * @note @note File name is left in definition in case customization is needed.
 *
 * @param model The model that cotains a mesh whose vertex data should be written to a CSV file.
 *
 * 
 */
void write_element_face_energy_to_csv(const Model &model);

/**
 * @brief Writes the last vertex data for the mesh to a CSV file.
 *
 * This function writes the coordinates of each vertex in the last step 
 * in the mesh to a CSV file named "vertexfinal.csv". The output is formatted as follows:
 *
 *     x1,y1,z1
 *     x2,y2,z2
 *     ...
 *
 * where xi, yi, and zi are the coordinates of the ith vertex in the mesh.
 * 
 * @note file name are left in definition in case customization is needed.
 *
 * @param mesh The mesh whose vertex data should be written to a CSV file.
 */
void write_final_vertex_data_to_csv(const Mesh &mesh);

/**
 * @brief Create surface point and mesh point trajectory files.
 * 
 * File output: surfacepoint<filename>.csv; meshpoint<filename>.csv
 * 
 * @param filename 
 */
void dynamics_create_trajectory_files(DynamicMesh &mesh, const std::string &filename);

/**
 * @brief Construct a new output trajectory files object
 * 
 * @param mesh 
 * @param input_filename 
 */
void output_trajectory_files(Mesh &mesh, const std::string &input_filename);

/**
 * @brief Open surface point and mesh point trajectory files and append to
 * the files with current data.
 * 
 * Files: surfacepoint<filename>.csv; meshpoint<filename>.csv
 * 
 * @param filename
 * 
 */
void dynamics_output_trajectory_files(DynamicMesh &mesh, const std::string &filename);

